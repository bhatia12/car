"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
const should = require("should");
describe('FirebaseAuthProvider', function () {
    const tc = new index_1.TestCase(this);
    const auth = tc.getAuthProvider();
    it('should create and list users', () => __awaiter(this, void 0, void 0, function* () {
        const user = yield auth.createUser('Test User', 'test@example.com', 'password');
        const users = yield auth.listUsers();
        should(users).length(1);
        should(users[0].uid).eql(user.uid);
    }));
    it('should fail to create a user', () => __awaiter(this, void 0, void 0, function* () {
        yield should(auth.createUser('Test User', 'test@example.com', '123')).rejected();
    }));
});
//# sourceMappingURL=auth_provider_test.js.map