"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const inversify_1 = require("inversify");
const uuid = require("uuid/v4");
exports.FirebaseAuthProvider = Symbol('FirebaseAuthProvider');
exports.FirebaseAuth = Symbol('FirebaseAuth');
let FakeAuthProvider = class FakeAuthProvider {
    constructor() {
        this.users = [];
    }
    getUser(uid) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.users.find(u => u.uid === uid);
        });
    }
    createUser(name, email, password) {
        return __awaiter(this, void 0, void 0, function* () {
            if (password.length < 6) {
                return Promise.reject(new Error('The password must be a string with at least 6 characters.'));
            }
            const user = {
                uid: uuid(),
                displayName: name,
                email: email,
                passwordHash: password
            };
            this.users.push(user);
            return user;
        });
    }
    verifyToken(token) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield this.getUser(token);
            if (user) {
                return user;
            }
            return Promise.reject('User not found');
        });
    }
    updateUser(userId, name, email, password) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield this.getUser(userId);
            if (!user) {
                return null;
            }
            if (name)
                user.displayName = name;
            if (email)
                user.email = email;
            if (password)
                user.passwordHash = password;
            return user;
        });
    }
    setEmail(userId, email) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield this.getUser(userId);
            if (!user) {
                return null;
            }
            user.email = email;
            return user;
        });
    }
    setPassword(userId, password) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield this.getUser(userId);
            if (!user) {
                return null;
            }
            user.passwordHash = password;
            return user;
        });
    }
    deleteUser(userId) {
        const index = this.users.findIndex(u => u.uid === userId);
        if (index >= 0) {
            this.users.splice(index, 1);
        }
        return Promise.resolve();
    }
    listUsers() {
        return Promise.resolve(this.users);
    }
    clear() {
        this.users = [];
    }
};
FakeAuthProvider = __decorate([
    inversify_1.injectable()
], FakeAuthProvider);
exports.FakeAuthProvider = FakeAuthProvider;
//# sourceMappingURL=auth_provider.js.map