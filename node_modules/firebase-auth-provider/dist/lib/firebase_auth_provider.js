"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const admin = require("firebase-admin");
const inversify_1 = require("inversify");
const auth_provider_1 = require("./auth_provider");
let FirebaseAuthProviderImpl = class FirebaseAuthProviderImpl {
    constructor(auth) {
        this.auth = auth;
    }
    getUser(uid) {
        return this.auth.getUser(uid);
    }
    createUser(name, email, password) {
        return this.auth.createUser({
            displayName: name,
            email: email,
            password: password
        });
    }
    updateUser(userId, name, email, password) {
        const updates = {};
        if (name)
            updates.displayName = name;
        if (email)
            updates.email = email;
        if (password)
            updates.password = password;
        return this.auth.updateUser(userId, updates);
    }
    setEmail(userId, email) {
        return this.auth.updateUser(userId, {
            email: email,
        });
    }
    setPassword(userId, password) {
        return this.auth.updateUser(userId, {
            password
        });
    }
    listUsers() {
        return __awaiter(this, void 0, void 0, function* () {
            const users = yield this.auth.listUsers();
            return users.users;
        });
    }
    deleteUser(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.auth.deleteUser(userId);
        });
    }
    verifyToken(token) {
        return this.auth.verifyIdToken(token);
    }
    getUserEmail(userId) {
        return __awaiter(this, void 0, void 0, function* () {
            const user = yield this.auth.getUser(userId);
            return user ? user.email : null;
        });
    }
};
FirebaseAuthProviderImpl = __decorate([
    inversify_1.injectable(),
    __param(0, inversify_1.inject(auth_provider_1.FirebaseAuth)),
    __metadata("design:paramtypes", [Object])
], FirebaseAuthProviderImpl);
exports.FirebaseAuthProviderImpl = FirebaseAuthProviderImpl;
//# sourceMappingURL=firebase_auth_provider.js.map